---
- name: Ensure Ghost directory structure exists
  file: dest="{{ item }}" recurse=yes state=directory
  with_items:
    - "{{ ghost.content_dir }}"
    - "{{ ghost.content_dir }}/themes"
    - "{{ ghost.logs_dir }}"

- name: Pull latest Ghost image and run docker container
  docker_container:
    name: ghost
    image: 'ghost'
    pull: yes
    state: started
    recreate: yes
    restart_policy: always
    hostname: "{{ ghost.host_name }}"
    ports:
      - "{{ ghost.http_port }}:2368/tcp"
    volumes:
      - "{{ ghost.content_dir }}:/var/lib/ghost/content"
    env:
      url: "{{ ghost.url }}"

- name: Download latest Ghostium theme
  shell: "wget https://github.com/oswaldoacauan/ghostium/archive/master.zip -O ghostium-master.zip"
  args:
    warn: no

- name: Unzip Ghostium theme
  shell: "unzip ghostium-master && rm ghostium-master.zip"
  args:
    warn: no

- name: Install Ghostium theme
  shell: |
    if [ ! -d "{{ ghost.content_dir }}/themes/ghostium-master" ]; then
      cp -r ghostium-master "{{ ghost.content_dir }}/themes/"
    else
      rsync -a --exclude="partials/custom" ghostium-master "{{ ghost.content_dir }}/themes/"
    fi
    rm -r ghostium-master
  args:
    warn: no

- name: Change Ghostium theme folder owner and group
  file:
    dest: "{{ ghost.content_dir }}/themes/ghostium-master"
    recurse: yes
    owner: 1000
    group: 1000

- name: Deploy Ghost nginx vhost
  include_tasks: deploy_nginx_vhost.yml
  vars:
    host_name: "{{ ghost.host_name }}"
    http_port: "{{ ghost.http_port }}"
    logs_dir: "{{ ghost.logs_dir }}"
    ssl: "{{ ghost.ssl_enabled }}"
    server_block_beginning: |
      {% if ghost.ip_auth %}
          include snippets/ip_auth.conf;
      {% endif %}

          client_max_body_size 10m;

          if ($http_cache_control = "no-cache") {
              set $no_cache "1";
          }

          location ^~ /assets/ {
              root {{ ghost.content_dir }}/themes/ghostium-master;
          }

          location ^~ /content/images/ {
              alias {{ ghost.content_dir }}/images/;
          }

    location_block_beginning: |2+
              proxy_cache one;
              proxy_cache_valid 60m;
              proxy_cache_valid 404 1m;
              proxy_cache_bypass $no_cache;
              proxy_ignore_headers Set-Cookie;
              proxy_hide_header Set-Cookie;
              proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
              proxy_ignore_headers Cache-Control;
              add_header X-Cache-Status $upstream_cache_status;

    server_block_ending: |
      {% if ghost.ip_auth %}
          location ~ ^/(ghost|p)/ {
              satisfy any;
              allow 192.168.88.0/24;
              allow 172.17.0.0/24;
              deny all;
              auth_request /auth-ip;

      {% if ghost.http_port.split(':') | count == 2 %}
              proxy_pass http://127.0.0.1:{{ ghost.http_port.split(':')[1] }};
      {% else %}
              proxy_pass http://127.0.0.1:{{ ghost.http_port }};
      {% endif %}
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
      {% endif %}
  when: ghost.nginx_proxy
