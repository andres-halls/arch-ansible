---
- name: Ensure gitlab directory structure exists
  file: dest="{{ item }}" recurse=yes state=directory
  with_items:
    - "{{ gitlab_config_dir }}"
    - "{{ gitlab_logs_dir }}"
    - "{{ gitlab_data_dir }}"

- name: Pull latest Gitlab image and run docker container
  docker_container:
    name: gitlab
    image: 'gitlab/gitlab-ce:latest'
    pull: yes
    recreate: yes
    restart_policy: always
    hostname: "{{ gitlab_host_name }}"
    ports:
      - "{{ gitlab_ssh_port }}:22"
      - "{{ gitlab_http_port }}:80"
      - "{{ gitlab_https_port }}:443"
      - "{{ gitlab_registry_port }}:{% if gitlab_registry_port.split(':') | count == 2 %}{{ gitlab_registry_port.split(':')[1] }}{% else %}{{ gitlab_registry_port }}{% endif %}"
    volumes:
      - "{{ gitlab_config_dir }}:/etc/gitlab"
      - "{{ gitlab_logs_dir }}:/var/log/gitlab"
      - "{{ gitlab_data_dir }}:/var/opt/gitlab"
    env:
      GITLAB_OMNIBUS_CONFIG: |
        external_url '{{ gitlab_host }}'
        gitlab_rails['gitlab_shell_ssh_port'] = {{ gitlab_ssh_port }}
        postgresql['shared_buffers'] = "512MB"
        {% if gitlab_registry and gitlab_registry_host != '' %}registry_external_url '{{ gitlab_registry_protocol }}://{{ gitlab_registry_host }}'{% endif %}

        {% if gitlab_nginx_proxy and gitlab_ssl_enabled %}
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        nginx['hsts_max_age'] = 0
        {% if gitlab_registry_port.split(':') | count == 2 %}
        registry_nginx['listen_port'] = {{ gitlab_registry_port.split(':')[1] }}
        {% else %}
        registry_nginx['listen_port'] = {{ gitlab_registry_port }}
        {% endif %}

        registry_nginx['listen_https'] = false
        registry_nginx['proxy_set_headers'] = {
            "Host" => "$http_host",
            "X-Real-IP" => "$remote_addr",
            "X-Forwarded-For" => "$proxy_add_x_forwarded_for",
            "X-Forwarded-Proto" => "https",
            "X-Forwarded-Ssl" => "on"
        }
        {% endif %}

- name: Deploy gitlab nginx vhost
  include_tasks: deploy_nginx_vhost.yml
  vars:
    host_name: "{{ gitlab_host_name }}"
    http_port: "{{ gitlab_http_port }}"
    logs_dir: "{{ gitlab_logs_dir }}"
    ssl: "{{ gitlab_ssl_enabled }}"
    server_block_beginning: |2
          client_max_body_size 10m;
    location_block_ending: |
      {% if gitlab_ssl_enabled %}
              proxy_set_header X-Forwarded-Port 443;
              proxy_set_header X-Forwarded-Ssl on;
      {% endif %}
  when: gitlab_nginx_proxy

- name: Create gitlab-runner config dir
  file: dest="{{ gitlab_runner_dir }}" recurse=yes state=directory
  when: gitlab_runner

- name: Pull latest Gitlab runner image and run docker container
  docker_container:
    name: 'gitlab-runner'
    image: 'gitlab/gitlab-runner:latest'
    pull: yes
    recreate: yes
    restart_policy: always
    hostname: 'gitlab-runner'
    volumes:
      - "{{ gitlab_runner_dir }}:/etc/gitlab-runner"
      - "/var/run/docker.sock:/var/run/docker.sock"
  when: gitlab_runner

- name: Install rsync in gitlab runner docker container
  command: "docker exec gitlab-runner bash -c 'apt-get update && apt-get -y install rsync'"

- name: Deploy gitlab registry nginx vhost
  include_tasks: deploy_nginx_vhost.yml
  vars:
    host_name: "{{ gitlab_registry_host }}"
    http_port: "{{ gitlab_registry_port }}"
    logs_dir: "{{ gitlab_logs_dir }}"
    ssl: "{{ gitlab_ssl_enabled }}"
    server_block_beginning: |
      {% if gitlab_registry_ip_auth %}
          include snippets/ip_auth.conf;
      {% endif %}
          client_max_body_size 0;
    location_block_beginning: |
      {% if gitlab_registry_ip_auth %}
              include snippets/ip_auth_check.conf;
      {% endif %}
  when: gitlab_nginx_proxy and gitlab_registry
