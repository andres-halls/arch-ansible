---
- name: Ensure gitlab directory structure exists
  file: dest="{{ item }}" recurse=yes state=directory
  with_items:
    - "{{ gitlab.config_dir }}"
    - "{{ gitlab.logs_dir }}"
    - "{{ gitlab.data_dir }}"

- name: Pull latest Gitlab image and run docker container
  docker_container:
    name: gitlab
    image: 'gitlab/gitlab-ce:latest'
    pull: yes
    state: started
    recreate: yes
    hostname: "{{ gitlab.host_name }}"
    ports:
      - "{{ gitlab.ssh_port }}:22"
      - "{{ gitlab.http_port }}:80"
      - "{{ gitlab.https_port }}:443"
    volumes:
      - "{{ gitlab.config_dir }}:/etc/gitlab"
      - "{{ gitlab.logs_dir }}:/var/log/gitlab"
      - "{{ gitlab.data_dir }}:/var/opt/gitlab"
    env:
      GITLAB_HOST: "{{ gitlab.host }}"

- name: Deploy nginx vhost config
  template: src=nginx_gitlab.conf.j2 dest="/etc/nginx/vhosts.d/{{ gitlab.host_name }}.conf"
  when: gitlab.nginx_proxy
  notify:
    - restart nginx

- meta: flush_handlers

- name: Generate SSL cert for {{ gitlab.host_name }} with letsencrypt
  command: "certbot certonly --webroot -w /var/lib/letsencrypt/ -d {{ gitlab.host_name }}"
  args:
    creates: "/etc/letsencrypt/live/{{ gitlab.host_name }}/fullchain.pem"
  when: gitlab.nginx_proxy and gitlab.ssl_enabled
  notify:
    - restart nginx

- name: Deploy nginx SSL config
  template: src=nginx_ssl.conf.j2 dest="/etc/nginx/snippets/ssl-{{ gitlab.host_name }}.conf"
  when: gitlab.nginx_proxy and gitlab.ssl_enabled
  notify:
    - restart nginx

- name: Enable gitlab SSL
  lineinfile:
    path: "/etc/nginx/vhosts.d/{{ gitlab.host_name }}.conf"
    regexp: 'include snippets\/ssl'
    line: 'include snippets/ssl-{{ gitlab.host_name }}.conf;'
  when: gitlab.nginx_proxy and gitlab.ssl_enabled
  notify:
    - restart nginx