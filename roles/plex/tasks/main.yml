---
- name: Check if plex user exists
  getent: database=passwd key=plex fail_key=no

- name: Create plex user
  user: name=plex shell=/sbin/nologin
  when: not getent_passwd.plex and plex.media_dir | search('/home/plex')

- name: Ensure plex directory structure exists
  file: dest="{{ item }}" recurse=yes state=directory
  with_items:
    - "{{ plex.config_dir }}"
    - "{{ plex.transcode_dir }}"
    - "{{ plex.media_dir }}"
    - "{{ plex.logs_dir }}"

- name: Pull latest Plex Media Server image and run docker container
  docker_container:
    name: plex
    image: 'plexinc/pms-docker:public'
    pull: yes
    state: started
    recreate: yes
    restart_policy: always
    hostname: "{{ plex.host_name }}"
    exposed_ports: "{{ webtools_ports if plex.webtools else [] }}"
    published_ports: "{{ plex_ports + webtools_ports if plex.webtools else plex_ports }}"
    volumes:
      - "{{ plex.config_dir }}:/config"
      - "{{ plex.transcode_dir }}:/transcode"
      - "{{ plex.media_dir }}:/data"
    env:
      TZ: "{{ plex.time_zone }}"
      ADVERTISE_IP: "{{ plex.advertise_ip }}"
      PLEX_UID: "{% if plex.uid != '' %}{{ plex.uid }}{% elif getent_passwd.plex %}{{ getent_passwd.plex[1] }}{% endif %}"
      PLEX_GID: "{% if plex.gid != '' %}{{ plex.gid }}{% elif getent_passwd.plex %}{{ getent_passwd.plex[2] }}{% endif %}"

- name: Install WebTools plug-in
  include_tasks: webtools.yml
  when: plex.webtools

- name: Install Tautulli
  include_tasks: tautulli.yml
  when: plex.tautulli

- name: Deploy nginx vhost config
  template: src=nginx_plex.conf.j2 dest="/etc/nginx/vhosts.d/{{ plex.host_name }}.conf"
  when: plex.nginx_proxy
  notify:
    - restart nginx

- meta: flush_handlers

- name: Generate SSL cert for {{ plex.host_name }} with letsencrypt
  command: "certbot certonly --webroot -w /var/lib/letsencrypt/ -d {{ plex.host_name }}"
  args:
    creates: "/etc/letsencrypt/live/{{ plex.host_name }}/fullchain.pem"
  when: plex.nginx_proxy and plex.ssl_enabled
  notify:
    - restart nginx

- name: Deploy nginx SSL config
  template: src=nginx_ssl.conf.j2 dest="/etc/nginx/snippets/ssl-{{ plex.host_name }}.conf"
  when: plex.nginx_proxy and plex.ssl_enabled
  notify:
    - restart nginx

- name: Enable plex SSL
  lineinfile:
    path: "/etc/nginx/vhosts.d/{{ plex.host_name }}.conf"
    regexp: 'include snippets\/ssl'
    line: '    include snippets/ssl-{{ plex.host_name }}.conf;'
  when: plex.nginx_proxy and plex.ssl_enabled
  notify:
    - restart nginx

- name: Deploy plex update systemd timer
  copy: src="{{ item }}" dest="/etc/systemd/system/{{ item }}"
  with_items:
    - 'plex-update.service'
    - 'plex-update.timer'
  notify:
    - reload systemd

- meta: flush_handlers

- name: Enable and start plex-update.timer
  service: name='plex-update.timer' enabled=yes state=started
